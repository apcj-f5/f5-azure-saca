{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "6.0.2.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "xadmin",
            "metadata": {
                "description": "User name for the Virtual Machine."
            },
            "type": "string"
        },
        "authenticationType": {
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "defaultValue": "password",
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            },
            "type": "string"
        },
        "adminPasswordOrKey": {
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            },
            "type": "securestring"
        },
        "WindowsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Windows Virtual Machine."
            }
        },
        "Tier1bigIpModules": {
            "defaultValue": "ltm:nominal,asm:nominal,afm:nominal",
            "metadata": {
                "description": "Comma separated list of modules and levels to provision, for example, ltm:nominal,asm:nominal"
            },
            "type": "string"
        },
        "Tier1DeclarationUrl": {
            "defaultValue": "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/AS3/paygsccaBaseline.json",
            "metadata": {
                "description": "URL for the AS3 (https://clouddocs.f5.com/products/extensions/f5-appsvcs-extension/3.5.1/) declaration JSON file to be deployed. Leave as **NOT_SPECIFIED** to deploy without a service configuration."
            },
            "type": "string"
        },
        "Tier3bigIpModules": {
            "defaultValue": "ltm:nominal,afm:nominal",
            "metadata": {
                "description": "Comma separated list of modules and levels to provision, for example, ltm:nominal,asm:nominal"
            },
            "type": "string"
        },
        "Tier3DeclarationUrl": {
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "URL for the AS3 (https://clouddocs.f5.com/products/extensions/f5-appsvcs-extension/3.5.1/) declaration JSON file to be deployed. Leave as **NOT_SPECIFIED** to deploy without a service configuration."
            },
            "type": "string"
        },
        "dnsLabelPrefix": {
            "defaultValue": "f5dns",
            "metadata": {
                "description": "Unique DNS HOST Name for the Public IP address used to access the Virtual Machine."
            },
            "type": "string"
        },
        "instanceName": {
            "defaultValue": "bigip",
            "metadata": {
                "description": "Name of the Virtual Machine."
            },
            "maxLength": 7,
            "type": "string"
        },
        "instanceType": {
            "allowedValues": [
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F4S",
                "Standard_F8S",
                "Standard_F16S",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "defaultValue": "Standard_DS4_v2",
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            },
            "type": "string"
        },
        "bigIpVersion": {
            "allowedValues": [
                "15.0.100000",
                "14.1.200000",
                "latest"
            ],
            "defaultValue": "14.1.200000",
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            },
            "type": "string"
        },
        "imageName": {
            "allowedValues": [
                "LTMTwoBootLocations",
                "AllTwoBootLocations"
            ],
            "defaultValue": "AllTwoBootLocations",
            "metadata": {
                "description": "F5 SKU (image) you want to deploy. Note: The disk size of the VM will be determined based on the option you select.  **Important**: If intending to provision multiple modules, ensure the appropriate value is selected, such as ****AllTwoBootLocations or AllOneBootLocation****."
            },
            "type": "string"
        },
        "licenseKey1": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            },
            "type": "string"
        },
        "licenseKey2": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            },
            "type": "string"
        },
        "licenseKey3": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            },
            "type": "string"
        },
        "licenseKey4": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            },
            "type": "string"
        },
        "STIGDevice": {
            "defaultValue": true,
            "metadata": {
                "description": "This setting will determine whether STIGS/SRGS will be applied at Onboarding."
            },
            "type": "bool"
        },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            },
            "type": "string"
        },
        "NorthboundLoadBalancerType": {
            "allowedValues": [
                "Public-alb",
                "Private-ilb"
            ],
            "defaultValue": "Public-alb",
            "metadata": {
                "description": "Specify a the type of Northbound Azure load balancer to deploy. Note: As of the initial release of this template,  it is default to Public-alb"
            },
            "type": "string"
        },
        "NorthUntrustedAddressSubnet": {
            "defaultValue": "192.168.2.0/24",
            "metadata": {
                "description": "The CIDR block the BIG-IP VEs use when creating the North Untrusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "NorthUntrustedAddressStartIP": {
            "defaultValue": "192.168.2.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "NorthUntrustedLBPrivateAddress": {
            "defaultValue": "192.168.2.100",
            "metadata": {
                "description": "The static address of the North Bound LB IP to be used for deployment. This is use ONLY IF the NorthboundLoadBalancerType is 'Private-ilb' type. You MUST type the full IP Address '192.168.2.100'."
            },
            "type": "string"
        },
        "NorthTrustedAddressSubnet": {
            "defaultValue": "192.168.3.0/24",
            "metadata": {
                "description": "The CIDR block the BIG-IP VEs use when creating the North Trusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "NorthTrustedAddressStartIP": {
            "defaultValue": "192.168.3.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "VDMSAddressSubnet": {
            "defaultValue": "192.168.4.0/24",
            "metadata": {
                "description": "The CIDR block the BIG-IP VEs use when creating the VDSS Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "IPSTier": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "Specify whether IPS Tier would deploy from this template. If 'Yes', then this is a 3-teirs architecture, otherwise it is 2-tiers architecture"
            },
            "type": "string"
        },
        "IPSUntrustedAddressSubnet": {
            "defaultValue": "192.168.5.0/24",
            "metadata": {
                "description": "The CIDR block the IPS VEs use when creating the Untrusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "IPSUntrustedAddressStartIP": {
            "defaultValue": "192.168.5.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "IPSUntrustedLBPrivateAddress": {
            "defaultValue": "192.168.5.100",
            "metadata": {
                "description": "The static address of the IPS LB IP to be used for deployment. You MUST type the full IP Address '192.168.5.100'."
            },
            "type": "string"
        },
        "IPSTrustedAddressSubnet": {
            "defaultValue": "192.168.6.0/24",
            "metadata": {
                "description": "The CIDR block the IPS VEs use when creating the South Trusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "IPSTrustedAddressStartIP": {
            "defaultValue": "192.168.6.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "SouthUntrustedAddressSubnet": {
            "defaultValue": "192.168.7.0/24",
            "metadata": {
                "description": "The CIDR block the BIG-IP VEs use when creating the South Untrusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "SouthUntrustedAddressStartIP": {
            "defaultValue": "192.168.7.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "SouthUntrustedLBPrivateAddress": {
            "defaultValue": "192.168.7.100",
            "metadata": {
                "description": "The static address of the South Bound LB IP to be used for deployment. You MUST type the full IP Address '192.168.7.100'."
            },
            "type": "string"
        },
        "SouthTrustedAddressSubnet": {
            "defaultValue": "192.168.8.0/24",
            "metadata": {
                "description": "The CIDR block the BIG-IP VEs use when creating the South Trusted Subnet.  You MUST type the full CIDR address, for example '10.0.0.0/24', '10.100.0.0/16', '192.168.0.0/24'."
            },
            "type": "string"
        },
        "SouthTrustedAddressStartIP": {
            "defaultValue": "192.168.8.4",
            "metadata": {
                "description": "The starting address of the IPs to be used for deployment. You MUST type the full IP Address '10.0.0.10', '10.100.0.40', '192.168.1.5'."
            },
            "type": "string"
        },
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org",
            "metadata": {
                "description": "Leave the default NTP server the BIG-IP uses, or replace the default NTP server with the one you want to use."
            },
            "type": "string"
        },
        "timeZone": {
            "defaultValue": "UTC",
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IP uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo (see the full list [here](https://github.com/F5Networks/f5-azure-arm-templates/blob/master/azure-timezone-list.md)). Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            },
            "type": "string"
        },
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            },
            "type": "string"
        },
        "tagValues": {
            "defaultValue": {
                "application": "APP",
                "cost": "COST",
                "environment": "ENV",
                "group": "GROUP",
                "owner": "OWNER"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        }
    },
    "variables": {
        "tagValues": "[parameters('tagValues')]",
        "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]",
        "allowUsageAnalytics": {
            "No": {
                "hashCmd": "echo AllowUsageAnalytics:No",
                "metricsCmd": ""
            },
            "Yes": {
                "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]",
                "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:failover_3nic-new-stack-saca-byol,templateVersion:7.2.0.0,region:', variables('location'), ',bigIpVersion:', parameters('bigIpVersion') ,',licenseType:byol,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
            }
        },
        "failovertagValues": {
            "f5_cloud_failover_label": "scca",
            "f5_cloud_failover_nic_map": "external"
        },
        "appScript": "IyEvYmluL2Jhc2gKZnVuY3Rpb24gcGFzc3dkKCkgewogIGVjaG8gfCBmNS1yZXN0LW5vZGUgL2NvbmZpZy9jbG91ZC9henVyZS9ub2RlX21vZHVsZXMvQGY1ZGV2Y2VudHJhbC9mNS1jbG91ZC1saWJzL3NjcmlwdHMvZGVjcnlwdERhdGFGcm9tRmlsZS5qcyAtLWRhdGEtZmlsZSAvY29uZmlnL2Nsb3VkLy5wYXNzd2QgfCBhd2sgJ3twcmludCAkMX0nCn0KCndoaWxlIGdldG9wdHMgbzp1OiBvcHRpb24KZG8gY2FzZSAiJG9wdGlvbiIgIGluCiAgICAgICAgbykgZGVjbGFyYXRpb25Vcmw9JE9QVEFSRzs7CiAgICAgICAgdSkgdXNlcj0kT1BUQVJHOzsKICAgIGVzYWMKZG9uZQoKZGVwbG95ZWQ9Im5vIgpmaWxlX2xvYz0iL2NvbmZpZy9jbG91ZC9jdXN0b21fY29uZmlnIgpkZmxfbWdtdF9wb3J0PWB0bXNoIGxpc3Qgc3lzIGh0dHBkIHNzbC1wb3J0IHwgZ3JlcCBzc2wtcG9ydCB8IHNlZCAncy9zc2wtcG9ydCAvLztzLyAvL2cnYAp1cmxfcmVnZXg9IihodHRwOlwvXC98aHR0cHM6XC9cLyk/W2EtejAtOV0rKFtcLVwuXXsxfVthLXowLTldKykqXC5bYS16XXsyLDV9KDpbMC05XXsxLDV9KT8oXC8uKik/JCIKCmlmIFtbICRkZWNsYXJhdGlvblVybCA9fiAkdXJsX3JlZ2V4IF1dOyB0aGVuCiAgICByZXNwb25zZV9jb2RlPSQoL3Vzci9iaW4vY3VybCAtLWludGVyZmFjZSBtZ210IC1zayAtdyAiJXtodHRwX2NvZGV9IiAkZGVjbGFyYXRpb25VcmwgLW8gJGZpbGVfbG9jKQogICAgaWYgW1sgJHJlc3BvbnNlX2NvZGUgPT0gMjAwIF1dOyB0aGVuCiAgICAgICAgIGVjaG8gIkN1c3RvbSBjb25maWcgZG93bmxvYWQgY29tcGxldGU7IGNoZWNraW5nIGZvciB2YWxpZCBKU09OLiIKICAgICAgICAgY2F0ICRmaWxlX2xvYyB8IGpxIC5jbGFzcwogICAgICAgICBpZiBbWyAkPyA9PSAwIF1dOyB0aGVuCiAgICAgICAgICAgICByZXNwb25zZV9jb2RlPSQoL3Vzci9iaW4vY3VybCAtc2t2dnUgJHVzZXI6JChwYXNzd2QpIC13ICIle2h0dHBfY29kZX0iIC1YIFBPU1QgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgLUggJ0V4cGVjdDonIC1kICJAJGZpbGVfbG9jIiBodHRwczovL2xvY2FsaG9zdDokZGZsX21nbXRfcG9ydC9tZ210L3NoYXJlZC9hcHBzdmNzL2RlY2xhcmUgLW8gL2Rldi9udWxsKQoKICAgICAgICAgICAgIGlmIFtbICRyZXNwb25zZV9jb2RlID09IDIwMCB8fCAkcmVzcG9uc2VfY29kZSA9PSAyMDcgfHwgJHJlc3BvbnNlX2NvZGUgPT0gNTAyIF1dOyB0aGVuCiAgICAgICAgICAgICAgICAgIGVjaG8gIkRlcGxveW1lbnQgb2YgYXBwbGljYXRpb24gc3VjY2VlZGVkLiAkcmVzcG9uc2VfY29kZSIKICAgICAgICAgICAgICAgICAgZGVwbG95ZWQ9InllcyIKICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICBlY2hvICJGYWlsZWQgdG8gZGVwbG95IGFwcGxpY2F0aW9uOyBjb250aW51aW5nIHdpdGggcmVzcG9uc2UgY29kZSAnIiRyZXNwb25zZV9jb2RlIiciCiAgICAgICAgICAgICBmaQogICAgICAgICBlbHNlCiAgICAgICAgICAgICBlY2hvICJDdXN0b20gY29uZmlnIHdhcyBub3QgdmFsaWQgSlNPTiwgY29udGludWluZyIKICAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBlY2hvICJGYWlsZWQgdG8gZG93bmxvYWQgY3VzdG9tIGNvbmZpZzsgY29udGludWluZyB3aXRoIHJlc3BvbnNlIGNvZGUgJyIkcmVzcG9uc2VfY29kZSInIgogICAgZmkKZWxzZQogICAgIGVjaG8gIkN1c3RvbSBjb25maWcgd2FzIG5vdCBhIFVSTCwgY29udGludWluZy4iCmZpCgppZiBbWyAkZGVwbG95ZWQgPT0gIm5vIiAmJiAkZGVjbGFyYXRpb25VcmwgPT0gIk5PVF9TUEVDSUZJRUQiIF1dOyB0aGVuCiAgICBlY2hvICJBcHBsaWNhdGlvbiBkZXBsb3ltZW50IGZhaWxlZCBvciBjdXN0b20gVVJMIHdhcyBub3Qgc3BlY2lmaWVkLiIKZmkKCmVjaG8gIkRlcGxveW1lbnQgY29tcGxldGUuIgpleGl0",
        "availabilitySetName0": "[concat(variables('dnsLabelPrefix'), '-avset0')]",
        "availabilitySetName1": "[concat(variables('dnsLabelPrefix'), '-avset1')]",
        "availabilitySetName2": "[concat(variables('dnsLabelPrefix'), '-avset2')]",
        "availabilitySetName3": "[concat(variables('dnsLabelPrefix'), '-avset3')]",
        "availabilitySetId0": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName0'))]"
        },
        "availabilitySetId1": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName1'))]"
        },
        "availabilitySetId2": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName2'))]"
        },
        "backEndAddressPoolArray": [
            {
                "id": "[concat(variables('nbALBid'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
            },
            {
                "id": "[concat(variables('nbILBid'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
            }
        ],
        "backEndMgmtPoolArray": [
            {
                "id": "[concat(variables('nbALBid'), '/backendAddressPools/', 'loadBalancerMgmtBackEnd')]"
            },
            {
                "id": "[concat(variables('mgmtALBid'), '/backendAddressPools/', 'loadBalancerMgmtBackEnd')]"
            }
        ],
        "SBBackEndAddressPool": {
            "id": "[concat(variables('sbILBid'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
        },
        "IPSBackEndAddressPool": {
            "id": "[concat(variables('IPSILBid'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
        },
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            },
            "2": {
                "Port": "443"
            },
            "3": {
                "Port": "443"
            },
            "4": {
                "Port": "443"
            },
            "5": {
                "Port": "443"
            },
            "6": {
                "Port": "443"
            }
        },
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]",

        "bigIpVersionPortMap": {
            "443": {
                "Port": 443
            },
            "15.0.100000": {
                "Port": 8443
            },
            "14.1.200000": {
                "Port": 8443
            },
            "latest": {
                "Port": 8443
            }
        },

        "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]",

        "commandArgs": "[concat('-o ', parameters('Tier1DeclarationUrl'), ' -u svc_user')]",
        "commandArgs2": "[concat('-o ', parameters('Tier3DeclarationUrl'), ' -u svc_user')]",
        "computeApiVersion": "2017-12-01",
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n",
        "customImage": "",
        "dataStorageAccountType": "Standard_LRS",
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabelPrefix'))]",
        "dnsLabelPrefix": "[toLower(parameters('dnsLabelPrefix'))]",
        "enableNetworkFailover": "Yes",
        "f5AS3Build": "f5-appsvcs-3.16.0-6.noarch.rpm",
        "f5CloudIappsLoggerTag": "v1.0.0",
        "f5CloudIappsSdTag": "v2.3.2",
        "f5CloudLibsTag": "v4.9.1",
        "failoverCmdArray": {
            "No": {
                "first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address none')]",
                "second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address none')]",
                "third": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address none')]",
                "fourth": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '3.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address none')]"
            },
            "Yes": {
                "first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress'))]",
                "second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress1'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress1'))]",
                "third": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address { { ip ', variables('intSubnet2PrivateAddress'), ' port 1026 } } mirror-ip ', variables('intSubnet2PrivateAddress'))]",
                "fourth": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '3.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' unicast-address { { ip ', variables('intSubnet2PrivateAddress1'), ' port 1026 } } mirror-ip ', variables('intSubnet2PrivateAddress1'))]"
            }
        },

        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]",
        "instanceName": "[toLower(parameters('instanceName'))]",
        "nbALBid": "[resourceId('Microsoft.Network/loadBalancers',variables('NorthboundLoadBalancerName'))]",
        "extNicName": "[concat(variables('dnsLabelPrefix'), '-ext')]",
        "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabelPrefix'),'-ext-nsg'))]",
        "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]",
        "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]",
        "extSubnetName": "external",
        "extSubnetPrivateAddressPrefix": "[substring(parameters('NorthUntrustedAddressStartIP'), 0, lastindexOf(parameters('NorthUntrustedAddressStartIP'), '.'))]",
        "extSubnetStartDirty": "[substring(parameters('NorthUntrustedAddressStartIP'), lastIndexOf(parameters('NorthUntrustedAddressStartIP'), '.'), sub(length(parameters('NorthUntrustedAddressStartIP')), lastIndexOf(parameters('NorthUntrustedAddressStartIP'), '.')))]",
        "extSubnetStartInt": "[replace(variables('extSubnetStartDirty'), '.','')]",
        "extSubnetPrivateAddress": "[parameters('NorthUntrustedAddressStartIP')]",
        "extSubnetPrivateAddress1": "[concat(variables('extSubnetPrivateAddressPrefix'), '.',add(int(variables('extSubnetStartInt')), 1))]",
        "NorthboundLoadBalancerName": "[concat(variables('dnsLabelPrefix'),'-nb-alb')]",
        "mgmtLoadBalancerName": "[concat(variables('dnsLabelPrefix'),'-mgmt-alb')]",
        "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabelPrefix'), '-ext-pip')]",

        "mgmtPublicIPAddressName": "[concat(variables('dnsLabelPrefix'), '-mgmt-pip')]",
        "mgmtPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",

        "nbILBid": "[resourceId('Microsoft.Network/loadBalancers',variables('NorthboundLoadBalancerNameb'))]",

        "intNicName": "[concat(variables('dnsLabelPrefix'), '-int')]",
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
        "intSubnetName": "internalNorth",
        "intSubnetPrivateAddressPrefix": "[substring(parameters('NorthTrustedAddressStartIP'), 0, lastindexOf(parameters('NorthTrustedAddressStartIP'), '.'))]",
        "intSubnetStartDirty": "[substring(parameters('NorthTrustedAddressStartIP'), lastIndexOf(parameters('NorthTrustedAddressStartIP'), '.'), sub(length(parameters('NorthTrustedAddressStartIP')), lastIndexOf(parameters('NorthTrustedAddressStartIP'), '.') ))]",
        "intSubnetStartInt": "[replace(variables('intSubnetStartDirty'), '.', '')]",
        "intSubnetPrivateAddress": "[parameters('NorthTrustedAddressStartIP')]",
        "intSubnetPrivateAddress1": "[concat(variables('intSubnetPrivateAddressPrefix'), '.', add(int(variables('IntSubnetStartInt')), 1))]",
        "intSubnetPrivateAddress2": "[concat(variables('intSubnetPrivateAddressPrefix'), '.', add(int(variables('IntSubnetStartInt')), 10))]",
        "intSubnetPrivateAddress3": "[concat(variables('intSubnetPrivateAddressPrefix'), '.', add(int(variables('IntSubnetStartInt')), 11))]",

        "intSubnet2Name": "internalSouth",
        "intSubnet2Id": "[concat(variables('vnetId'), '/subnets/', variables('intSubnet2Name'))]",
        "intSubnet2PrivateAddressPrefix": "[substring(parameters('SouthTrustedAddressStartIP'), 0, lastindexOf(parameters('SouthTrustedAddressStartIP'), '.'))]",
        "intSubnet2StartDirty": "[substring(parameters('SouthTrustedAddressStartIP'), lastIndexOf(parameters('SouthTrustedAddressStartIP'), '.'), sub(length(parameters('SouthTrustedAddressStartIP')), lastIndexOf(parameters('SouthTrustedAddressStartIP'), '.') ))]",
        "intSubnet2StartInt": "[replace(variables('intSubnet2StartDirty'), '.', '')]",
        "intSubnet2PrivateAddress": "[parameters('SouthTrustedAddressStartIP')]",
        "intSubnet2PrivateAddress1": "[concat(variables('intSubnet2PrivateAddressPrefix'), '.', add(int(variables('intSubnet2StartInt')), 1))]",
        "intSubnet2PrivateAddress2": "[concat(variables('intSubnet2PrivateAddressPrefix'), '.', add(int(variables('intSubnet2StartInt')), 10))]",
        "intSubnet2PrivateAddress3": "[concat(variables('intSubnet2PrivateAddressPrefix'), '.', add(int(variables('intSubnet2StartInt')), 11))]",

        "NorthboundLoadBalancerNameb": "[concat(variables('dnsLabelPrefix'),'-nb-ilb')]",

        "tmmRouteGw": "[concat(variables('extSubnetPrivateAddressPrefix'), '.1')]",

        "mgmtALBid": "[resourceId('Microsoft.Network/loadBalancers',variables('mgmtLoadBalancerName'))]",
        "sbILBid": "[resourceId('Microsoft.Network/loadBalancers',variables('SouthboundLoadBalancerName'))]",
        "SouthboundLoadBalancerName": "[concat(variables('dnsLabelPrefix'),'-sb-ilb')]",
        "extSubnet2Name": "external2",
        "extSubnet2PrivateAddressPrefix": "[substring(parameters('SouthUntrustedAddressStartIP'), 0, lastindexOf(parameters('SouthUntrustedAddressStartIP'), '.'))]",
        "extSubnet2StartDirty": "[substring(parameters('SouthUntrustedAddressStartIP'), lastIndexOf(parameters('SouthUntrustedAddressStartIP'), '.'), sub(length(parameters('SouthUntrustedAddressStartIP')), lastIndexOf(parameters('SouthUntrustedAddressStartIP'), '.')))]",
        "extSubnet2StartInt": "[replace(variables('extSubnet2StartDirty'), '.','')]",
        "extSubnet2PrivateAddress": "[parameters('SouthUntrustedAddressStartIP')]",
        "extSubnet2PrivateAddress1": "[concat(variables('extSubnet2PrivateAddressPrefix'), '.',add(int(variables('extSubnet2StartInt')), 1))]",
        "extSubnet2Id": "[concat(variables('vnetId'), '/subnets/', variables('extSubnet2Name'))]",

        "tmmRoute2Gw": "[concat(variables('intSubnet2PrivateAddressPrefix'), '.1')]",
        "IPSILBid": "[resourceId('Microsoft.Network/loadBalancers',variables('IPSLoadBalancerName'))]",
        "IPSLoadBalancerName": "[concat(variables('dnsLabelPrefix'),'-ips-ilb')]",
        "IPSFirewallName": "[concat(variables('dnsLabelPrefix'),'-ips-fw')]",
        "IPSExtNicName": "[concat(variables('dnsLabelPrefix'), '-IPSExt')]",
        "IPSExtSubnetName": "ips-external",
        "IPSExtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('IPSExtSubnetName'))]",
        "IPSExtSubnetPrivateAddressPrefix": "[substring(parameters('IPSUntrustedAddressStartIP'), 0, lastindexOf(parameters('IPSUntrustedAddressStartIP'), '.'))]",
        "IPSExtSubnetStartDirty": "[substring(parameters('IPSUntrustedAddressStartIP'), lastIndexOf(parameters('IPSUntrustedAddressStartIP'), '.'), sub(length(parameters('IPSUntrustedAddressStartIP')), lastIndexOf(parameters('IPSUntrustedAddressStartIP'), '.')))]",
        "IPSExtSubnetStartInt": "[replace(variables('IPSExtSubnetStartDirty'), '.','')]",
        "IPSExtSubnetPrivateAddress": "[parameters('IPSUntrustedAddressStartIP')]",
        "IPSExtSubnetPrivateAddress1": "[concat(variables('IPSExtSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSExtSubnetStartInt')), 1))]",
        "IPSExtSubnetPrivateAddress2": "[concat(variables('IPSExtSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSExtSubnetStartInt')), 10))]",
        "IPSExtSubnetPrivateAddress3": "[concat(variables('IPSExtSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSExtSubnetStartInt')), 11))]",
        "IPSIntNicName": "[concat(variables('dnsLabelPrefix'), '-IPSInt')]",
        "IPSIntSubnetName": "ips-internal",
        "IPSIntSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('IPSIntSubnetName'))]",
        "IPSIntSubnetPrivateAddressPrefix": "[substring(parameters('IPSTrustedAddressStartIP'), 0, lastindexOf(parameters('IPSTrustedAddressStartIP'), '.'))]",
        "IPSIntSubnetStartDirty": "[substring(parameters('IPSTrustedAddressStartIP'), lastIndexOf(parameters('IPSTrustedAddressStartIP'), '.'), sub(length(parameters('IPSTrustedAddressStartIP')), lastIndexOf(parameters('IPSTrustedAddressStartIP'), '.')))]",
        "IPSIntSubnetStartInt": "[replace(variables('IPSIntSubnetStartDirty'), '.','')]",
        "IPSIntSubnetPrivateAddress": "[parameters('IPSTrustedAddressStartIP')]",
        "IPSIntSubnetPrivateAddress1": "[concat(variables('IPSIntSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSIntSubnetStartInt')), 1))]",
        "IPSIntSubnetPrivateAddress2": "[concat(variables('IPSIntSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSIntSubnetStartInt')), 10))]",
        "IPSIntSubnetPrivateAddress3": "[concat(variables('IPSIntSubnetPrivateAddressPrefix'), '.', add(int(variables('IPSIntSubnetStartInt')), 11))]",

        "isAcceleratedNetworkingSupported": "[if(not(contains(parameters('bigIpVersion'),  '14.1.200000')), bool('true'), bool('false'))]",

        "mgmtNicName": "[concat(variables('dnsLabelPrefix'), '-mgmt')]",
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
        "mgmtSubnetName": "management",
        "ManagementAddressSubnet": "192.168.1.0/24",
        "ManagementAddressStartIP": "192.168.1.4",

        "mgmtSubnetPrivateAddress": "[variables('ManagementAddressStartIP')]",
        "mgmtSubnetPrivateAddressPrefix": "[substring(variables('ManagementAddressStartIP'), 0, lastindexOf(variables('ManagementAddressStartIP'), '.'))]",
        "mgmtSubnetStartDirty": "[substring(variables('ManagementAddressStartIP'), lastIndexOf(variables('ManagementAddressStartIP'), '.'), sub(length(variables('ManagementAddressStartIP')), lastIndexOf(variables('ManagementAddressStartIP'), '.') ))]",
        "mgmtSubnetStartInt": "[replace(variables('mgmtSubnetStartDirty'), '.','')]",
        "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 5))]",
        "mgmtSubnetPrivateAddress2": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 6))]",
        "mgmtSubnetPrivateAddress3": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 7))]",
        "mgmtSubnetPrivateAddress4": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 50))]",
        "mgmtSubnetPrivateAddress5": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 51))]",
        "mgmtSubnetPrivateAddress6": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 61))]",
        "mgmtSubnetPrivateAddress7": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), '.',add(int(variables('mgmtSubnetStartInt')), 62))]",

        "stigCmdArray": {
            "true": "bash ./bigipstig.sh;",
            "false": ""
        },
        "cmdConfigStig": "[if(parameters('STIGDevice'), variables('stigCmdArray').true, variables('stigCmdArray').false)]",
        "createFWLogArray": {
            "true": "tmsh create security log profile local-afm-log { network replace-all-with { local-afm-log { publisher local-db-publisher filter { log-acl-match-accept enabled log-acl-match-drop enabled log-acl-match-reject enabled } } } };",
            "false": ""
        },
        "cmdcreateFWLog": "[if(contains(parameters('Tier1bigIpModules'), 'afm'), variables('createFWLogArray').true, variables('createFWLogArray').false)]",
        "cmdcreateFWLog2": "[if(contains(parameters('Tier3bigIpModules'), 'afm'), variables('createFWLogArray').true, variables('createFWLogArray').false)]",
        "createFWPolicyArray": {
            "true": "tmsh create security firewall policy log_all_afm rules add { allow_all { action accept log yes place-before first } deny_all { action reject log yes place-after allow_all } };",
            "false": ""
        },
        "cmdcreateFWPolicy": "[if(contains(parameters('Tier1bigIpModules'), 'afm'), variables('createFWPolicyArray').true, variables('createFWPolicyArray').false)]",
        "cmdcreateFWPolicy2": "[if(contains(parameters('Tier1bigIpModules'), 'afm'), variables('createFWPolicyArray').true, variables('createFWPolicyArray').false)]",
        "installDODRootCA": "unzip Certificates_PKCS7_v5.5_DoD.zip; openssl pkcs7 -print_certs -in ./Certificates_PKCS7_v5.5_DoD/Certificates_PKCS7_v5.5_DoD.pem.p7b -out DoD_Root_CA.cer; tmsh install sys crypto cert DODRoots from-local-file DoD_Root_CA.cer;",
        "firewallConfig": "[concat(variables('cmdcreateFWLog'), variables('cmdcreateFWPolicy'))]",
        "firewallConfig2": "[concat(variables('cmdcreateFWLog2'), variables('cmdcreateFWPolicy2'))]",

        "sacaConfig": "[variables('cmdConfigStig')]",

        "vdmsSubnetName": "VDMS",
        "windowsOSVersion": "2019-Datacenter",
        "WinvmName": "[concat(variables('dnsLabelPrefix'), '-win-jb')]",
        "jbimageOffer": "UbuntuServer",
        "jbimagePublisher": "Canonical",
        "jblinuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[parameters('adminPasswordOrKey')]",
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        },
        "jbubuntuOSVersion": "18.04-LTS",
        "jbvmName": "[concat(variables('dnsLabelPrefix'), '-linux-jump')]",
        "jbvmSize": "Standard_A1",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]",
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        },
        "location": "[resourceGroup().location]",

        "networkApiVersion": "2017-11-01",
        "newCustomImageName": "[concat(variables('dnsLabelPrefix'), 'image')]",
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabelPrefix'), resourceGroup().id, deployment().name), 'data000')]",
        "numberOfExternalIps": 1,

        "osProfiles": {
            "password": {
                "one": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[concat(variables('instanceName'), '0')]",
                    "linuxConfiguration": "[json('null')]"
                },
                "two": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[concat(variables('instanceName'), '1')]",
                    "linuxConfiguration": "[json('null')]"
                },
                "three": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[concat(variables('instanceName'), '2')]",
                    "linuxConfiguration": "[json('null')]"
                },
                "four": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[concat(variables('instanceName'), '3')]",
                    "linuxConfiguration": "[json('null')]"
                }

            },
            "sshPublicKey": {
                "adminUsername": "[parameters('adminUsername')]",
                "computerName": "[variables('instanceName')]",
                "linuxConfiguration": "[variables('linuxConfiguration')]"
            }
        },
        "premiumInstanceArray": [
            "Standard_DS2",
            "Standard_DS3",
            "Standard_DS4",
            "Standard_DS11",
            "Standard_DS12",
            "Standard_DS13",
            "Standard_DS14",
            "Standard_DS2_v2",
            "Standard_DS3_v2",
            "Standard_DS4_v2",
            "Standard_DS5_v2",
            "Standard_DS11_v2",
            "Standard_DS12_v2",
            "Standard_DS13_v2",
            "Standard_DS14_v2",
            "Standard_DS15_v2",
            "Standard_F2S",
            "Standard_F4S",
            "Standard_F8S",
            "Standard_F16S",
            "Standard_GS2",
            "Standard_GS3",
            "Standard_GS4",
            "Standard_GS5"
        ],
        "publicIPAddressType": "Static",
        "resourceGroupName": "[resourceGroup().name]",

        "routeCmd": "route",
        "singleQuote": "'",

        "imageNameToLower": "[toLower(parameters('imageName'))]",

        "skuToUse": "[concat('f5-', variables('imageNameSub'),'-byol')]",
        "offerToUse": "[concat('f5-big-ip-', variables('imageNameArray').offerPostfix[variables('imageNameSub')])]",
        "imageNameSub": "[variables('imageNameArray')[parameters('bigIpVersion')][parameters('imageName')]]",
        "imageNameArray": {
            "15.0.100000": {
                "AllOneBootLocation": "big-all-1slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-1slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "14.1.200000": {
                "AllOneBootLocation": "big-all-1slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-1slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "latest": {
                "AllOneBootLocation": "big-all-2slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-2slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "offerPostfix": {
                "big-all-1slot": "byol",
                "big-all-2slot": "byol",
                "big-ltm-1slot": "byol",
                "big-ltm-2slot": "byol",
                "bigip-virtual-edition-best": "best",
                "bigip-virtual-edition-good": "good"
            }
        },
        "imagePlan": {
            "name": "[variables('skuToUse')]",
            "product": "[variables('offerToUse')]",
            "publisher": "f5-networks"
        },
        "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
        },
        "storageApiVersion": "2017-10-01",
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            },
            "platformImage": {
                "imageReference": "[variables('imageReference')]",
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        },
        "subscriptionID": "[subscription().subscriptionId]",
        "useCustomImage": "[not(empty(variables('customImage')))]",
        "verifyHash64": "Y2xpIHNjcmlwdCAvQ29tbW9uL3ZlcmlmeUhhc2ggewpwcm9jIHNjcmlwdDo6cnVuIHt9IHsKICAgICAgICBpZiB7W2NhdGNoIHsKICAgICAgICAgICAgc2V0IGhhc2hlcyhhc20tcG9saWN5LWxpbnV4LnRhci5neikgNjNiNWMyYTUxY2EwOWM0M2JkODlhZjM3NzNiYmFiODdjNzFhNmU3ZjZhZDk0MTBiMjI5YjRlMGExYzQ4M2Q0NmYxYTlmZmYzOWQ5OTQ0MDQxYjAyZWU5MjYwNzI0MDI3NDE0ZGU1OTJlOTlmNGMyNDc1NDE1MzIzZTE4YTcyZTAKICAgICAgICAgICAgc2V0IGhhc2hlcyhmNS5odHRwLnYxLjIuMHJjNC50bXBsKSA0N2MxOWE4M2ViZmM3YmQxZTllOWMzNWYzNDI0OTQ1ZWY4Njk0YWE0MzdlZWRkMTdiNmEzODc3ODhkNGRiMTM5NmZlZmU0NDUxOTliNDk3MDY0ZDc2OTY3YjBkNTAyMzgxNTQxOTBjYTBiZDczOTQxMjk4ZmMyNTdkZjRkYzAzNAogICAgICAgICAgICBzZXQgaGFzaGVzKGY1Lmh0dHAudjEuMi4wcmM2LnRtcGwpIDgxMWIxNGJmZmFhYjVlZDAzNjVmMDEwNmJiNWNlNWU0ZWMyMjM4NTY1NWVhM2FjMDRkZTJhMzliZDk5NDRmNTFlMzcxNDYxOWRhZTdjYTQzNjYyYzk1NmI1MjEyMjI4ODU4ZjA1OTI2NzJhMjU3OWQ0YTg3NzY5MTg2ZTJjYmZlCiAgICAgICAgICAgIHNldCBoYXNoZXMoZjUuaHR0cC52MS4yLjByYzcudG1wbCkgMjFmNDEzMzQyZTlhN2EyODFhMGYwZTEzMDFlNzQ1YWE4NmFmMjFhNjk3ZDJlNmZkYzIxZGQyNzk3MzQ5MzY2MzFlOTJmMzRiZjFjMmQyNTA0YzIwMWY1NmNjZDc1YzVjMTNiYWEyZmU3NjUzMjEzNjg5ZWMzYzllMjdkZmY3N2QKICAgICAgICAgICAgc2V0IGhhc2hlcyhmNS5hd3NfYWR2YW5jZWRfaGEudjEuMy4wcmMxLnRtcGwpIDllNTUxNDljMDEwYzFkMzk1YWJkYWUzYzNkMmNiODNlYzEzZDMxZWQzOTQyNDY5NWU4ODY4MGNmM2VkNWEwMTNkNjI2YjMyNjcxMWQzZDQwZWYyZGY0NmI3MmQ0MTRiNGNiOGU0ZjQ0NWVhMDczOGRjYmQyNWM0Yzg0M2FjMzlkCiAgICAgICAgICAgIHNldCBoYXNoZXMoZjUuYXdzX2FkdmFuY2VkX2hhLnYxLjQuMHJjMS50bXBsKSBkZTA2ODQ1NTI1NzQxMmE5NDlmMWVhZGNjYWVlODUwNjM0N2UwNGZkNjliZmI2NDUwMDFiNzZmMjAwMTI3NjY4ZTRhMDZiZTJiYmI5NGUxMGZlZmMyMTVjZmMzNjY1YjA3OTQ1ZTZkNzMzY2JlMWE0ZmExYjg4ZTg4MTU5MDM5NgogICAgICAgICAgICBzZXQgaGFzaGVzKGY1LmF3c19hZHZhbmNlZF9oYS52MS40LjByYzIudG1wbCkgNmFiMGJmZmM0MjZkZjdkMzE5MTNmOWE0NzRiMWEwNzg2MDQzNWUzNjZiMDdkNzdiMzIwNjRhY2ZiMjk1MmMxZjIwN2JlYWVkNzcwMTNhMTVlNDRkODBkNzRmMzI1M2U3Y2Y5ZmJiZTEyYTkwZWM3MTI4ZGU2ZmFjZDA5N2Q2OGYKICAgICAgICAgICAgc2V0IGhhc2hlcyhmNS5hd3NfYWR2YW5jZWRfaGEudjEuNC4wcmMzLnRtcGwpIDJmMjMzOWI0YmMzYTIzYzljZmQ0MmFhZTJhNmRlMzliYTA2NTgzNjZmMjU5ODVkZTJlYTUzNDEwYTc0NWYwZjE4ZWVkYzQ5MWIyMGY0YThkYmE4ZGI0ODk3MDA5NmUyZWZkY2E3YjhlZmZmYTFhODNhNzhlNWFhZGYyMThiMTM0CiAgICAgICAgICAgIHNldCBoYXNoZXMoZjUuYXdzX2FkdmFuY2VkX2hhLnYxLjQuMHJjNC50bXBsKSAyNDE4YWM4YjFmMTg4NGM1YzA5NmNiYWM2YTk0ZDQwNTlhYWFmMDU5MjdhNmE0NTA4ZmQxZjI1YjhjYzYwNzc0OTg4MzlmYmRkYTgxNzZkMmNmMmQyNzRhMjdlNmExZGFlMmExZTNhMGE5OTkxYmM2NWZjNzRmYzBkMDJjZTk2MwogICAgICAgICAgICBzZXQgaGFzaGVzKGY1LmF3c19hZHZhbmNlZF9oYS52MS40LjByYzUudG1wbCkgNWU1ODIxODdhZTFhNjMyM2UwOTVkNDFlZGRkNDExNTFkNmJkMzhlYjgzYzYzNDQxMGQ0NTI3YTNkMGUyNDZhOGZjNjI2ODVhYjA4NDlkZTJhZGU2MmIwMjc1ZjUxMjY0ZDJkZWFjY2JjMTZiNzczNDE3Zjg0N2E0YTFlYTliYzQKICAgICAgICAgICAgc2V0IGhhc2hlcyhhc20tcG9saWN5LnRhci5neikgMmQzOWVjNjBkMDA2ZDA1ZDhhMTU2N2ExZDhhYWU3MjI0MTllOGIwNjJhZDc3ZDZkOWEzMTY1Mjk3MWU1ZTY3YmM0MDQzZDgxNjcxYmEyYThiMTJkZDIyOWVhNDZkMjA1MTQ0Zjc1Mzc0ZWQ0Y2FlNThjZWZhOGY5YWI2NTMzZTYKICAgICAgICAgICAgc2V0IGhhc2hlcyhkZXBsb3lfd2FmLnNoKSAxYTNhM2M2Mjc0YWIwOGE3ZGMyY2I3M2FlZGM4ZDJiMmEyM2NkOWUwZWIwNmEyZTE1MzRiMzYzMmYyNTBmMWQ4OTcwNTZmMjE5ZDViMzVkM2VlZDEyMDcwMjZlODk5ODlmNzU0ODQwZmQ5Mjk2OWM1MTVhZTRkODI5MjE0ZmI3NAogICAgICAgICAgICBzZXQgaGFzaGVzKGY1LnBvbGljeV9jcmVhdG9yLnRtcGwpIDA2NTM5ZTA4ZDExNWVmYWZlNTVhYTUwN2VjYjRlNDQzZTgzYmRiMWY1ODI1YTk1MTQ5NTRlZjZjYTU2ZDI0MGVkMDBjN2I1ZDY3YmQ4ZjY3YjgxNWVlOWRkNDY0NTE5ODQ3MDFkMDU4Yzg5ZGFlMjQzNGM4OTcxNWQzNzVhNjIwCgogICAgICAgICAgICBzZXQgZmlsZV9wYXRoIFtsaW5kZXggJHRtc2g6OmFyZ3YgMV0KICAgICAgICAgICAgc2V0IGZpbGVfbmFtZSBbZmlsZSB0YWlsICRmaWxlX3BhdGhdCgogICAgICAgICAgICBpZiB7IVtpbmZvIGV4aXN0cyBoYXNoZXMoJGZpbGVfbmFtZSldfSB7CiAgICAgICAgICAgICAgICB0bXNoOjpsb2cgZXJyICJObyBoYXNoIGZvdW5kIGZvciAkZmlsZV9uYW1lIgogICAgICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNldCBleHBlY3RlZF9oYXNoICRoYXNoZXMoJGZpbGVfbmFtZSkKICAgICAgICAgICAgc2V0IGNvbXB1dGVkX2hhc2ggW2xpbmRleCBbZXhlYyAvdXNyL2Jpbi9vcGVuc3NsIGRnc3QgLXIgLXNoYTUxMiAkZmlsZV9wYXRoXSAwXQogICAgICAgICAgICBpZiB7ICRleHBlY3RlZF9oYXNoIGVxICRjb21wdXRlZF9oYXNoIH0gewogICAgICAgICAgICAgICAgZXhpdCAwCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdG1zaDo6bG9nIGVyciAiSGFzaCBkb2VzIG5vdCBtYXRjaCBmb3IgJGZpbGVfcGF0aCIKICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgfV19IHsKICAgICAgICAgICAgdG1zaDo6bG9nIGVyciB7VW5leHBlY3RlZCBlcnJvciBpbiB2ZXJpZnlIYXNofQogICAgICAgICAgICBleGl0IDEKICAgICAgICB9CiAgICB9Cn0=",
        "installCloudLibs64": "IyEvYmluL2Jhc2gKZWNobyAgYWJvdXQgdG8gZXhlY3V0ZQpjaGVja3M9MAp3aGlsZSBbICRjaGVja3MgLWx0IDEyMCBdOyBkbyBlY2hvIGNoZWNraW5nIG1jcGQKICAgIHRtc2ggLWEgc2hvdyBzeXMgbWNwLXN0YXRlIGZpZWxkLWZtdCB8IGdyZXAgLXEgcnVubmluZwogICBpZiBbICQ/ID09IDAgXTsgdGhlbgogICAgICAgZWNobyBtY3BkIHJlYWR5CiAgICAgICBicmVhawogICBmaQogICBlY2hvIG1jcGQgbm90IHJlYWR5IHlldAogICBsZXQgY2hlY2tzPWNoZWNrcysxCiAgIHNsZWVwIDEwCmRvbmUgCgplY2hvICBleHBhbmRpbmcgZjUtY2xvdWQtbGlicy50YXIuZ3oKdGFyIHh2ZnogL2NvbmZpZy9jbG91ZC9mNS1jbG91ZC1saWJzLnRhci5neiAtQyAvY29uZmlnL2Nsb3VkL2F6dXJlL25vZGVfbW9kdWxlcy9AZjVkZXZjZW50cmFsCmVjaG8gIGNsb3VkIGxpYnMgaW5zdGFsbCBjb21wbGV0ZQp0b3VjaCAvY29uZmlnL2Nsb3VkL2Nsb3VkTGlic1JlYWR5",
        "virtualNetworkName": "SCCA_VNet",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[not(equals(variables('numberOfExternalIps'),0))]",
            "copy": {
                "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]",
                "name": "extpipcopy"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('extPublicIPAddressNamePrefix'), copyIndex())]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabelPrefix'), '-0')]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[equals(parameters('NorthboundLoadBalancerType'),'Private-ilb')]",
            "location": "[variables('location')]",
            "name": "[variables('mgmtPublicIPAddressName')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabelPrefix'), '-1')]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "name": "[variables('virtualNetworkName')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('NorthUntrustedAddressSubnet')]",
                        "[parameters('NorthTrustedAddressSubnet')]",
                        "[variables('ManagementAddressSubnet')]",
                        "[parameters('SouthUntrustedAddressSubnet')]",
                        "[parameters('SouthTrustedAddressSubnet')]",
                        "[parameters('IPSUntrustedAddressSubnet')]",
                        "[parameters('IPSTrustedAddressSubnet')]",
                        "[parameters('VDMSAddressSubnet')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('mgmtSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('ManagementAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('extSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('NorthUntrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('extSubnet2Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('SouthUntrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('intSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('NorthTrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('intSubnet2Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('SouthTrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('IPSExtSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('IPSUntrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('IPSIntSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('IPSTrustedAddressSubnet')]"
                        }
                    },
                    {
                        "name": "[variables('vdmsSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('VDMSAddressSubnet')]"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/virtualNetworks"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "[variables('nbALbId')]",
                "[concat('Microsoft.Network/loadBalancers/', variables('mgmtLoadBalancerName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '0')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndMgmtPoolArray'), 1), skip(variables('backEndMgmtPoolArray'), 1))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "[variables('nbALbId')]",
                "[concat('Microsoft.Network/loadBalancers/', variables('mgmtLoadBalancerName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '1')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndMgmtPoolArray'), 1), skip(variables('backEndMgmtPoolArray'), 1))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "[variables('nbALbId')]",
                "[concat('Microsoft.Network/loadBalancers/', variables('mgmtLoadBalancerName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '2')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndMgmtPoolArray'), 1), skip(variables('backEndMgmtPoolArray'), 1))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress2')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "[variables('nbALbId')]",
                "[concat('Microsoft.Network/loadBalancers/', variables('mgmtLoadBalancerName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '3')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndMgmtPoolArray'), 1), skip(variables('backEndMgmtPoolArray'), 1))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress3')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '4')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress4')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '5')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress5')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '6')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress6')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '7')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-mgmt-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress7')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "extpipcopy",
                "[variables('nbALbId')]",
                "[variables('nbILbId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '0')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('extSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig0')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndAddressPoolArray'), 1), skip(variables('backEndAddressPoolArray'), 1))]",
                            "primary": false,
                            "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), '.',10)]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), union(variables('tagValues'),variables('failovertagValues')))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "extpipcopy",
                "[variables('nbALbId')]",
                "[variables('nbILbId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '1')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('extSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig1')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('NorthboundLoadBalancerType'),'Public-alb'), take(variables('backEndAddressPoolArray'), 1), skip(variables('backEndAddressPoolArray'), 1))]",
                            "primary": false,
                            "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), '.', 11)]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), union(variables('tagValues'),variables('failovertagValues')))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('sbILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '2')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('extSubnet2PrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnet2Id')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig2')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                "[variables('SBBackEndAddressPool')]"
                            ],
                            "primary": false,
                            "privateIPAddress": "[concat(variables('extSubnet2PrivateAddressPrefix'), '.',10)]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnet2Id')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), union(variables('tagValues'),variables('failovertagValues')))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('sbILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '3')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('extSubnet2PrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnet2Id')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig3')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                "[variables('SBBackEndAddressPool')]"
                            ],
                            "primary": false,
                            "privateIPAddress": "[concat(variables('extSubnet2PrivateAddressPrefix'), '.',11)]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnet2Id')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), union(variables('tagValues'),variables('failovertagValues')))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "extpipcopy"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '0')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('intSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnetPrivateAddress2')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('extNsgID')]",
                "extpipcopy"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '1')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('intSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnetPrivateAddress3')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('sbILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '2')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('intSubnet2PrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnet2Id')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnet2PrivateAddress2')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnet2Id')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('sbILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '3')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('intSubnet2PrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnet2Id')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnet2PrivateAddress3')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnet2Id')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('IPSILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('IPSExtNicName'), '0')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": true,
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-ext-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('IPSExtSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSExtSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                "[variables('IPSBackEndAddressPool')]"
                            ],
                            "privateIPAddress": "[variables('IPSExtSubnetPrivateAddress2')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSExtSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('IPSILBid')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('IPSExtNicName'), '1')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": true,
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-ext-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('IPSExtSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSExtSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                "[variables('IPSBackEndAddressPool')]"
                            ],
                            "privateIPAddress": "[variables('IPSExtSubnetPrivateAddress3')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSExtSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('IPSIntNicName'), '0')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": true,
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('IPSIntSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSIntSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('IPSIntSubnetPrivateAddress2')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSIntSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('IPSIntNicName'), '1')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": true,
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig')]",
                        "properties": {
                            "primary": true,
                            "privateIPAddress": "[variables('IPSIntSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSIntSubnetId')]"
                            }
                        }
                    },
                    {
                        "name": "[concat(variables('dnsLabelPrefix'), '-int-ipconfig-secondary')]",
                        "properties": {
                            "privateIPAddress": "[variables('IPSIntSubnetPrivateAddress3')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSIntSubnetId')]"
                            }
                        }
                    }
                ],
                "primary": true
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-ext-nsg')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ext_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ssh_allow_22",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "rdp_allow_3389",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "3389",
                            "direction": "Inbound",
                            "priority": 103,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[equals(parameters('NorthboundLoadBalancerType'),'Public-alb')]",
            "dependsOn": [
                "extpipcopy"
            ],
            "location": "[variables('location')]",
            "name": "[variables('NorthboundLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    },
                    {
                        "name": "loadBalancerMgmtBackEnd"
                    }
                ],
                "copy": [
                    {
                        "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]",
                        "input": {
                            "name": "[concat('loadBalancerFrontEnd', copyIndex('frontendIPConfigurations', 1))]",
                            "properties": {
                                "publicIPAddress": {
                                    "id": "[concat(variables('extPublicIPAddressIdPrefix'), sub(copyIndex('frontendIPConfigurations', 1), 1))]"
                                }
                            }
                        },
                        "name": "frontendIPConfigurations"
                    }
                ],
                "probes": [
                    {
                        "name": "ssh_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "rdp_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 3389,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "http_alive",
                        "properties": {
                            "protocol": "Http",
                            "port": 80,
                            "requestPath": "/",
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "https_alive",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": 443,
                            "protocol": "Tcp"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "rdp_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
                            },
                            "frontendPort": 3389,
                            "backendPort": 3389,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/probes/rdp_alive')]"
                            }
                        }
                    },
                    {
                        "name": "ssh_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/probes/ssh_alive')]"
                            }
                        }
                    },
                    {
                        "Name": "management_outbound",
                        "properties": {
                            "backendPort": 8443,
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
                            },
                            "frontendPort": 8443,
                            "idleTimeoutInMinutes": 15,
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/backendAddressPools/loadBalancerMgmtBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerName')), '/probes/https_alive')]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[equals(parameters('NorthboundLoadBalancerType'),'Private-ilb')]",
            "dependsOn": [
                "extpipcopy"
            ],
            "location": "[variables('location')]",
            "name": "[variables('NorthboundLoadBalancerNameb')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "privateIPAddress": "[parameters('NorthUntrustedLBPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "ssh_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "rdp_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 3389,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "http_alive",
                        "properties": {
                            "protocol": "Http",
                            "port": 80,
                            "requestPath": "/",
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "rdp_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 3389,
                            "backendPort": 3389,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/probes/rdp_alive')]"
                            }
                        }
                    },
                    {
                        "name": "ssh_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('NorthboundLoadBalancerNameb')), '/probes/ssh_alive')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('SouthboundLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "privateIPAddress": "[parameters('SouthUntrustedLBPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnet2Id')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "ssh_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "rdp_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 3389,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "http_alive",
                        "properties": {
                            "protocol": "Http",
                            "port": 80,
                            "requestPath": "/",
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "rdp_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 3389,
                            "backendPort": 3389,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/probes/rdp_alive')]"
                            }
                        }
                    },
                    {
                        "name": "ssh_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('SouthboundLoadBalancerName')), '/probes/ssh_alive')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('IPSLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "privateIPAddress": "[parameters('IPSUntrustedLBPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('IPSExtSubnetId')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "ssh_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "rdp_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 3389,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "http_alive",
                        "properties": {
                            "protocol": "Http",
                            "port": 80,
                            "requestPath": "/",
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "https_alive",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": 443,
                            "protocol": "Tcp"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "rdp_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 3389,
                            "backendPort": 3389,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/probes/rdp_alive')]"
                            }
                        }
                    },
                    {
                        "name": "ssh_vs",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('IPSLoadBalancerName')), '/probes/ssh_alive')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "condition": "[equals(parameters('NorthboundLoadBalancerType'),'Private-ilb')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('mgmtLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerMgmtBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[variables('mgmtPublicIPAddressIdPrefix')]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "ssh_alive",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "for_outbound",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('mgmtLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 1234,
                            "backendPort": 3389,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('mgmtLoadBalancerName')), '/backendAddressPools/loadBalancerMgmtBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('mgmtLoadBalancerName')), '/probes/ssh_alive')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName0')]",
            "properties": {
                "PlatformFaultDomainCount": 2,
                "PlatformUpdateDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName1')]",
            "properties": {
                "PlatformFaultDomainCount": 2,
                "PlatformUpdateDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName2')]",
            "properties": {
                "PlatformFaultDomainCount": 2,
                "PlatformUpdateDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName3')]",
            "properties": {
                "PlatformFaultDomainCount": 2,
                "PlatformUpdateDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('storageApiVersion')]",
            "kind": "Storage",
            "location": "[variables('location')]",
            "name": "[variables('newDataStorageAccountName')]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "sku": {
                "name": "[variables('dataStorageAccountType')]",
                "tier": "Standard"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]",
            "location": "[variables('location')]",
            "name": "[variables('newCustomImageName')]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]",
                        "osState": "Generalized",
                        "osType": "Linux",
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/images"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName0'))]",
                "[variables('newCustomImageName')]",
                "[variables('WinvmName')]",
                "[variables('jbvmName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "properties": {
                "availabilitySet": "[variables('availabilitySetId0')]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '0'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '0'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '0'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": "[variables('osProfiles')[parameters('authenticationType')].one]",
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName0'))]",
                "[variables('newCustomImageName')]",
                "[variables('WinvmName')]",
                "[variables('jbvmName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "properties": {
                "availabilitySet": "[variables('availabilitySetId0')]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '1'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '1'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '1'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": "[variables('osProfiles')[parameters('authenticationType')].two]",
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName1'))]",
                "[variables('newCustomImageName')]",
                "[variables('WinvmName')]",
                "[variables('jbvmName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '2')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '2')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '2')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '2')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "properties": {
                "availabilitySet": "[variables('availabilitySetId1')]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '2'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '2'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '2'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": "[variables('osProfiles')[parameters('authenticationType')].three]",
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName1'))]",
                "[variables('newCustomImageName')]",
                "[variables('WinvmName')]",
                "[variables('jbvmName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '3')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '3')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '3')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '3')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "properties": {
                "availabilitySet": "[variables('availabilitySetId1')]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '3'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '3'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '3'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": "[variables('osProfiles')[parameters('authenticationType')].four]",
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "2018-10-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('IPSFirewallName'), '0')]",
            "location": "[variables('location')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName2'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '6')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('IPSExtNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('IPSIntNicName'), '0')]"
            ],
            "properties": {
                "availabilitySet": "[variables('availabilitySetId2')]",
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('IPSFirewallName'), '0')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('jblinuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jbimagePublisher')]",
                        "offer": "[variables('jbimageOffer')]",
                        "sku": "[variables('jbubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1023,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '6'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('IPSExtNicName'), '0'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('IPSIntNicName'), '0'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
                    }
                }
            }
        },
        {
            "apiVersion": "2018-10-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('IPSFirewallName'), '1')]",
            "location": "[variables('location')]",
            "condition": "[equals(parameters('IPSTier'),'Yes')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName2'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '7')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('IPSExtNicName'), '1')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('IPSIntNicName'), '1')]"
            ],
            "properties": {
                "availabilitySet": "[variables('availabilitySetId2')]",
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('IPSFirewallName'), '1')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('jblinuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jbimagePublisher')]",
                        "offer": "[variables('jbimageOffer')]",
                        "sku": "[variables('jbubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1023,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '7'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('IPSExtNicName'), '1'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('IPSIntNicName'), '1'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
                    }
                }
            }
        },
        {
            "apiVersion": "2018-10-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('jbvmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '4'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('jbvmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('jbvmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('jblinuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jbimagePublisher')]",
                        "offer": "[variables('jbimageOffer')]",
                        "sku": "[variables('jbubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1023,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '4'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('WinvmName')]",
            "location": "[variables('location')]",
            "apiVersion": "2018-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '5'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_A2"
                },
                "osProfile": {
                    "computerName": "[variables('WinvmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('WindowsAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "[variables('windowsOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1023,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '5'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '2')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '3')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '0/start')]",
            "properties": {
                "autoUpgradeMinorVersion": "true",
                "protectedSettings": {
                    "commandToExecute": "[concat('function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs*.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash64'), ' | base64 -d > /config/verifyHash; echo -e ', variables('installCloudLibs64'), ' | base64 -d > /config/installCloudLibs.sh; echo -e ', variables('appScript'), ' | /usr/bin/base64 -d > /config/cloud/deploy_app.sh; chmod +x /config/cloud/deploy_app.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --license ', parameters('licenseKey1'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --modules ', parameters('Tier1bigIpModules'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'), ',vlan:internal --log-level info; ', variables('failoverCmdArray')[variables('enableNetworkFailover')].first, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --network-failover --auto-sync --save-on-auto-sync;', variables('firewallConfig'), ' bash /config/cloud/deploy_app.sh ', variables('commandArgs'), '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; ', variables('routeCmd'), '; echo -e ', variables('routeCmd'), ' >> /config/startup; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi', ';', variables('installDODRootCA'), variables('sacaConfig'))]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/', variables('f5AS3Build'))]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]",
                        "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/master/dist/f5-cloud-libs.tar.gz",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/Certificates_PKCS7_v5.5_DoD.zip",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/STIG/bigipstig.sh",
                        "https://raw.githubusercontent.com/mikej81/f5-securecloud-AS3/master/asm/13.1/sccaBaselineASMPolicy.xml"
                    ]
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '2')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '3')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '1/start')]",
            "properties": {
                "autoUpgradeMinorVersion": "true",
                "protectedSettings": {
                    "commandToExecute": "[concat('function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs*.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash64'), ' | base64 -d > /config/verifyHash; echo -e ', variables('installCloudLibs64'), ' | base64 -d > /config/installCloudLibs.sh; echo -e ', variables('appScript'), ' | /usr/bin/base64 -d > /config/cloud/deploy_app.sh; chmod +x /config/cloud/deploy_app.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --license ', parameters('licenseKey2'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --modules ', parameters('Tier1bigIpModules'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'), ',vlan:internal --log-level info; ', variables('failoverCmdArray')[variables('enableNetworkFailover')].second, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; ', variables('routeCmd'), '; echo -e ', variables('routeCmd'), ' >> /config/startup; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi', ';', variables('sacaConfig'))]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/', variables('f5AS3Build'))]",
                        "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/master/dist/f5-cloud-libs.tar.gz",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/STIG/bigipstig.sh"
                    ]
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '2')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '3')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '2/start')]",
            "properties": {
                "autoUpgradeMinorVersion": "true",
                "protectedSettings": {
                    "commandToExecute": "[concat('function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs*.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash64'), ' | base64 -d > /config/verifyHash; echo -e ', variables('installCloudLibs64'), ' | base64 -d > /config/installCloudLibs.sh; echo -e ', variables('appScript'), ' | /usr/bin/base64 -d > /config/cloud/deploy_app.sh; chmod +x /config/cloud/deploy_app.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --no-reboot --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --license ', parameters('licenseKey3'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --modules ', parameters('Tier3bigIpModules'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRoute2Gw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnet2PrivateAddress'), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnet2PrivateAddress'), ',vlan:internal --log-level info; ', variables('failoverCmdArray')[variables('enableNetworkFailover')].third, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnet2PrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --network-failover --auto-sync --save-on-auto-sync;', variables('firewallConfig2'), ' bash /config/cloud/deploy_app.sh ', variables('commandArgs2'), '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; ', variables('routeCmd'), '; echo -e ', variables('routeCmd'), ' >> /config/startup; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi', ';', variables('installDODRootCA'), variables('sacaConfig'))]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/', variables('f5AS3Build'))]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]",
                        "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/master/dist/f5-cloud-libs.tar.gz",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/Certificates_PKCS7_v5.5_DoD.zip",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/STIG/bigipstig.sh",
                        "https://raw.githubusercontent.com/mikej81/f5-securecloud-AS3/master/asm/13.1/sccaBaselineASMPolicy.xml"
                    ]
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '0')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '1')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '2')]",
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix'), '-', variables('instanceName'), '3')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabelPrefix'), '-', variables('instanceName'), '3/start')]",
            "properties": {
                "autoUpgradeMinorVersion": "true",
                "protectedSettings": {
                    "commandToExecute": "[concat('function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash64'), ' | base64 -d > /config/verifyHash; echo -e ', variables('installCloudLibs64'), ' | base64 -d > /config/installCloudLibs.sh; echo -e ', variables('appScript'), ' | /usr/bin/base64 -d > /config/cloud/deploy_app.sh; chmod +x /config/cloud/deploy_app.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted;', variables('allowUsageAnalytics')['No'].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress3'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '3.', variables('location'), '.cloudapp.usgovcloudapi.net'), ' --license ', parameters('licenseKey4'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --modules ', parameters('Tier3bigIpModules'), '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress3'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRoute2Gw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnet2PrivateAddress1'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnet2PrivateAddress1'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[variables('enableNetworkFailover')].fourth, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress3'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnet2PrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress2'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; ', variables('routeCmd'), '; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi', ';', variables('sacaConfig'))]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/resources/', variables('f5AS3Build'))]",
                        "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/master/dist/f5-cloud-libs.tar.gz",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]",
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]",
                        "https://raw.githubusercontent.com/f5devcentral/f5-azure-saca/master/SACAv2/STIG/bigipstig.sh"
                    ]
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ],
    "outputs": {
        "RDP-URL": {
            "type": "string",
            "value": "[concat('rdp://',reference(concat(variables('extPublicIPAddressNamePrefix'), '0')).dnsSettings.fqdn)]"
        },
        "SSH-URL": {
            "type": "string",
            "value": "[concat('ssh://', parameters('adminUsername'), '@', reference(concat(variables('extPublicIPAddressNamePrefix'), '0')).dnsSettings.fqdn)]"
        }
    }
}